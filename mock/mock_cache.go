// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TheHipbot/hermes/cache (interfaces: Cache)

// Package mock is a generated GoMock package.
package mock

import (
	cache "github.com/TheHipbot/hermes/cache"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockCache) Add(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockCacheMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCache)(nil).Add), arg0, arg1)
}

// AddRemote mocks base method
func (m *MockCache) AddRemote(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "AddRemote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemote indicates an expected call of AddRemote
func (mr *MockCacheMockRecorder) AddRemote(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemote", reflect.TypeOf((*MockCache)(nil).AddRemote), arg0, arg1)
}

// Close mocks base method
func (m *MockCache) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockCacheMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCache)(nil).Close))
}

// Open mocks base method
func (m *MockCache) Open() {
	m.ctrl.Call(m, "Open")
}

// Open indicates an expected call of Open
func (mr *MockCacheMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockCache)(nil).Open))
}

// Save mocks base method
func (m *MockCache) Save() error {
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockCacheMockRecorder) Save() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCache)(nil).Save))
}

// Search mocks base method
func (m *MockCache) Search(arg0 string) []cache.Repo {
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].([]cache.Repo)
	return ret0
}

// Search indicates an expected call of Search
func (mr *MockCacheMockRecorder) Search(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCache)(nil).Search), arg0)
}
