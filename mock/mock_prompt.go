// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TheHipbot/hermes/prompt (interfaces: Prompt,Factory)

// Package mock_prompt is a generated GoMock package.
package mock_prompt

import (
	prompt "github.com/TheHipbot/hermes/prompt"
	gomock "github.com/golang/mock/gomock"
	promptui "github.com/manifoldco/promptui"
	reflect "reflect"
)

// MockPrompt is a mock of Prompt interface
type MockPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockPromptMockRecorder
}

// MockPromptMockRecorder is the mock recorder for MockPrompt
type MockPromptMockRecorder struct {
	mock *MockPrompt
}

// NewMockPrompt creates a new mock instance
func NewMockPrompt(ctrl *gomock.Controller) *MockPrompt {
	mock := &MockPrompt{ctrl: ctrl}
	mock.recorder = &MockPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrompt) EXPECT() *MockPromptMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockPrompt) Run() (int, string, error) {
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run
func (mr *MockPromptMockRecorder) Run() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPrompt)(nil).Run))
}

// MockFactory is a mock of Factory interface
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// CreateSelectPrompt mocks base method
func (m *MockFactory) CreateSelectPrompt(arg0 string, arg1 interface{}, arg2 *promptui.SelectTemplates) prompt.Prompt {
	ret := m.ctrl.Call(m, "CreateSelectPrompt", arg0, arg1, arg2)
	ret0, _ := ret[0].(prompt.Prompt)
	return ret0
}

// CreateSelectPrompt indicates an expected call of CreateSelectPrompt
func (mr *MockFactoryMockRecorder) CreateSelectPrompt(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSelectPrompt", reflect.TypeOf((*MockFactory)(nil).CreateSelectPrompt), arg0, arg1, arg2)
}
