// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TheHipbot/hermes/pkg/remote (interfaces: Driver)

// Package mock is a generated GoMock package.
package mock

import (
	remote "github.com/TheHipbot/hermes/pkg/remote"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDriver is a mock of Driver interface
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// AuthType mocks base method
func (m *MockDriver) AuthType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthType")
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthType indicates an expected call of AuthType
func (mr *MockDriverMockRecorder) AuthType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthType", reflect.TypeOf((*MockDriver)(nil).AuthType))
}

// Authenticate mocks base method
func (m *MockDriver) Authenticate(arg0 remote.Auth) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authenticate", arg0)
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockDriverMockRecorder) Authenticate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockDriver)(nil).Authenticate), arg0)
}

// GetRepos mocks base method
func (m *MockDriver) GetRepos() ([]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepos")
	ret0, _ := ret[0].([]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepos indicates an expected call of GetRepos
func (mr *MockDriverMockRecorder) GetRepos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepos", reflect.TypeOf((*MockDriver)(nil).GetRepos))
}

// SetHost mocks base method
func (m *MockDriver) SetHost(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHost", arg0)
}

// SetHost indicates an expected call of SetHost
func (mr *MockDriverMockRecorder) SetHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHost", reflect.TypeOf((*MockDriver)(nil).SetHost), arg0)
}
