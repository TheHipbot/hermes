// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TheHipbot/hermes/pkg/repo (interfaces: Cloner)

// Package mock is a generated GoMock package.
package mock

import (
	repo "github.com/TheHipbot/hermes/pkg/repo"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCloner is a mock of Cloner interface
type MockCloner struct {
	ctrl     *gomock.Controller
	recorder *MockClonerMockRecorder
}

// MockClonerMockRecorder is the mock recorder for MockCloner
type MockClonerMockRecorder struct {
	mock *MockCloner
}

// NewMockCloner creates a new mock instance
func NewMockCloner(ctrl *gomock.Controller) *MockCloner {
	mock := &MockCloner{ctrl: ctrl}
	mock.recorder = &MockClonerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloner) EXPECT() *MockClonerMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *MockCloner) Clone(arg0 string, arg1 *repo.CloneOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockClonerMockRecorder) Clone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockCloner)(nil).Clone), arg0, arg1)
}
